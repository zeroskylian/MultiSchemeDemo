default_platform(:ios)

platform :ios do
  desc "Build App"
  lane :test do
    gym(
      # 每次打包之前clean一下
      clean: true,
      # 打包出ipa文件路径
      output_directory: "./fastlane/build/test",
      # 打包的名称
      output_name: "Test.ipa",
      # 项目的scheme
      scheme: "Test",
      # 配置文件
      configuration: "Test",
      # 是否包含symbols 符号表
      include_symbols: true,
      # 是否包含bitcode
      include_bitcode: false,
      # 打包类型 Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application
      export_method: "development",
      # 这个设置是为了设置 xcode 自动配置证书和配置文件，当然也可以手动配置，可以参考文档
      export_xcargs: "-allowProvisioningUpdates"
      # export_options: {
      # provisioningProfiles: {
      #   "com.example.bundleid" => "Provisioning Profile Name",
      # }
      # }
    )
    # mac上的通知弹窗，通知打包完毕
    notification(
      app_icon: "./fastlane/henglink.png",
      title: "Fastlane",
      subtitle: "打包成功，已导出安装包",
      message: ""
    )
    # 配置上传蒲公英账号  蒲公英的 api_key和 user_key  用自己蒲公英账号的，别用我的！！！如果没有可删除
    # pgyer(api_key:'fbf25d2a525e12d5084b0ae09098ab7b', user_key: '12bba6204bd7c3e26375f653f8086358', update_description: "测试fastlane自动打包")
  end

  lane :testflight do
    gym(
      # 每次打包之前clean一下
      clean: true,
      # 打包出ipa文件路径
      output_directory: "./fastlane/build/test",
      # 打包的名称
      output_name: "testflight.ipa",
      # 项目的scheme
      scheme: "Release",
      # 配置文件
      configuration: "Release",
      # 是否包含symbols 符号表
      include_symbols: true,
      # 是否包含bitcode
      include_bitcode: false,
      # 打包类型 Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application
      export_method: "app-store",
      # 这个设置是为了设置 xcode 自动配置证书和配置文件，当然也可以手动配置，可以参考文档
      export_xcargs: "-allowProvisioningUpdates"
      # export_options: {
      # provisioningProfiles: {
      #   "com.example.bundleid" => "Provisioning Profile Name",
      # }
      # }
    )
    # mac上的通知弹窗，通知打包完毕
    notification(
      app_icon: "./fastlane/henglink.png",
      title: "Fastlane",
      subtitle: "打包成功，已导出安装包",
      message: ""
    )
    # 配置上传到App Store connect的api_key
    # 通过这种设置可以绕过二次认证等验证操作，实现一键打包上传
    api_key =
      app_store_connect_api_key(
        # 通过苹果申请的key id，申请同时会生成issuer_id和一个授p8权文件，就是以下参数，文件只能下载一次，注意保存，申请方式https://appleid.apple.com/account/manage中的专用密钥
        key_id: "J52H42C2FU",
        issuer_id: "69a6de8d-d9d7-47e3-e053-5b8c7c11a4d1",
        # 授权文件路径
        key_filepath: "./fastlane/AuthKey_J52H42C2FU.p8",
        duration: 1200,
        in_house: false
      )
    # 上传到testflight
    upload_to_testflight(
      # 上边设置的授权信息
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      # 打包好要上传的文件
      ipa: "./fastlane/release/test.ipa",
      skip_submission: true
    )
    # 通知上传成功
    notification(
      app_icon: "icon.png",
      title: "Fastlane",
      subtitle: "IPA上传成功",
      message: "自动打包完成！"
    )
  end

  lane :release do
    gym(
      # 每次打包之前clean一下
      clean: true,
      # 打包出ipa文件路径
      output_directory: "./fastlane/build/release",
      # 打包的名称
      output_name: "release.ipa",
      # 项目的scheme
      scheme: "Release",
      # 配置文件
      configuration: "Release",
      # 是否包含symbols 符号表
      include_symbols: true,
      # 是否包含bitcode
      include_bitcode: false,
      # 打包类型 Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application
      export_method: "app-store",
      # 这个设置是为了设置 xcode 自动配置证书和配置文件，当然也可以手动配置，可以参考文档
      export_xcargs: "-allowProvisioningUpdates"
      # export_options: {
      # provisioningProfiles: {
      #   "com.example.bundleid" => "Provisioning Profile Name",
      # }
      # }
    )
    # mac上的通知弹窗，通知打包完毕
    notification(
      app_icon: "./fastlane/henglink.png",
      title: "Fastlane",
      subtitle: "打包成功，已导出安装包",
      message: ""
    )
    upload_to_app_store
  end
end
